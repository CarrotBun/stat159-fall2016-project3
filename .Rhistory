?rnorm
matrix(data = rnorm(), nrow = 10, ncol = 2)
matrix(data = rnorm(1,1,1), nrow = 10, ncol = 2)
data = matrix(data = rnorm(1,1,1), nrow = 10, ncol = 2)
data
data = as.data.frame(matrix(data = rnorm(1,1,1), nrow = 10, ncol = 2))
min = min(data$v1)
data$V1
min = min(data$V1)
max = max(data$V1)
minV1 = min(data$V1)
maxV2 = max(data$V1)
maxV1 = max(data$V1)
minV2 = min(data$V2)
maxV2 = max(data$V2)
colMeans(data)
?apply
apply(data, 2, min())
apply(data, 2, min)
apply(data, 2, max)
apply(data, 2, mean)
apply(data, 2, sd)
apply(data, 2, median)
min = apply(data, 2, min)
max = apply(data, 2, max)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
median = apply(data, 2, median)
rbind(min, max, mean, sd, median)
summary = rbind(min, max, mean, sd, median)
plot(data$V1, data$V2)
data = as.data.frame(matrix(data = rnorm(10,1,1), nrow = 10, ncol = 2))
data = as.data.frame(matrix(data = rnorm(20,1,1), nrow = 10, ncol = 2))
min = apply(data, 2, min)
max = apply(data, 2, max)
mean = apply(data, 2, mean)
sd = apply(data, 2, sd)
median = apply(data, 2, median)
summary = rbind(min, max, mean, sd, median)
plot(data$V1, data$V2)
ggplot(data)
plot(data$V1, data$V2, title = "Scatter Plot", xlab = "V1", ylab = "V2")
plot(data$V1, data$V2, main = "Scatter Plot", xlab = "V1", ylab = "V2")
?rnorm()
rnorm(10,0,1)
pnorm(1.96)
pnorm(0)
pnorm(2)
pnorm(1)
setwd("~/stat159/stat159-project3")
library(pls)
set.seed(159)
source("code/scripts/train-test-set-scripts.R")
source("code/scripts/train-test-sets-scripts.R")
source("code/scripts/train-test-sets-script.R")
View(train_set)
pcr_reg <- pcr(ADM_RATE ~ ., data= train_set, validation = "CV")
pcr_train <- pcr(ADM_RATE ~ ., data = train_set,
scale =TRUE, validation = "CV")
pcr_train <- pcr(ADM_RATE ~ ., data= , validation = "CV")
rm(pcr_reg)
pcr_train = pcr(ADM_RATE ~ ., data= , validation = "CV")
pcr_train = pcr(ADM_RATE ~ ., data= train_set, validation = "CV")
pcr_best = which.min(pcr_train$validation$PRESS)
pcr_best
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
png(filename = "images/pcr-validation.png")
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
dev.off()
plot(predict(pcr_train, test_set, ncomp = pcr_best),
type = "l", col = "red",main = "PCR Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(test_set$ADM_RATE, col = "black")
plot(predict(pcr_train, test_set, ncomp = pcr_best),
type = "l", col = "red",main = "PCR Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
plot(predict(pcr_train, test_set, ncomp = pcr_best), col = "red",main = "PCR Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(test_set$ADM_RATE, col = "black")
pcr_pred <- predict(pcr_train, test_set[ ,-1],ncomp=pcr_best)
View(test_set)
pcr_pred <- predict(pcr_train, test_set[ ,-84],ncomp=pcr_best)
pcr_tMSE <- mean((pcr_pred - test_set$ADM_RATE)^2)
pcr_tMSE
pcr_pred
head(pcr_pred)
head( test_set[ ,-84])
ncols(train_set)
ncol(train_set)
train_nona <- complete.cases(train_set)
matrix <- as.matrix(train_set[train_nona,-84])
pcr_train = pcr(ADM_RATE ~ ., data= train_set[train_nona, ], validation = "CV")
pcr_best = which.min(pcr_train$validation$PRESS)
pcr_best
png(filename = "images/pcr-validation.png")
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
dev.off()
test_nona = complete.casese(test_set)
pcr_pred <- predict(pcr_train, test_set[test_nona,-84], ncomp = pcr_best)
test_nona = complete.casese(test_set)
test_nona = complete.cases(test_set)
pcr_pred <- predict(pcr_train, test_set[test_nona,-84], ncomp = pcr_best)
pcr_pred
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, ADM_RATE])^2)
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, "ADM_RATE"])^2)
pcr_tMSE
full_nona = complete.cases(scaled_colleges)
pcr_full <- pcr(ADM_RATE ~ ., data= scaled_colleges[full_nona, -84], ncomp = pcr_best)
pcr_full <- pcr(ADM_RATE ~ ., data= scaled_colleges[full_nona, ], ncomp = pcr_best)
sink("data/pcr-output.txt")
cat("Best Model's Lambda:\n")
pcr_best
cat("\n Test MSE:\n")
pcr_tMSE
cat("\n Official Model and Coefficients:\n")
summary(pcr_full)
cat("\n")
coefficients(pcr_full)
sink()
save(pcr_train, pcr_best, pcr_tMSE, pcr_full, file ="data/PCR-Regression.RData")
library(pls)
set.seed(98765)
########################### Load Data and T-T indicies ##########################
source("code/scripts/train-test-sets-script.R")
# rows with only no NA's
train_nona <- complete.cases(train_set)
########################### Run PCR and Cross Validation ##########################
pcr_train = pcr(ADM_RATE ~ ., data= train_set[train_nona, ], validation = "CV")
########################### Best lambda/model ##########################
pcr_best = which.min(pcr_train$validation$PRESS)
########################### Validation plot ##########################
png(filename = "images/pcr-validation.png")
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
dev.off()
########################### Apply best model to test set ##########################
# rows with only no NA's
test_nona = complete.cases(test_set)
# get predicted admissions rates with test set
pcr_pred <- predict(pcr_train, test_set[test_nona,-84], ncomp = pcr_best)
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, "ADM_RATE"])^2)
########################### Full Model ##########################
full_nona = complete.cases(scaled_colleges)
pcr_full <- pcr(ADM_RATE ~ ., data= scaled_colleges[full_nona, ], ncomp = pcr_best)
########################### output primary results ##########################
sink("data/pcr-output.txt")
cat("Best Model's Lambda:\n")
pcr_best
cat("\n Test MSE:\n")
pcr_tMSE
cat("\n Official Model and Coefficients:\n")
summary(pcr_full)
cat("\n")
coefficients(pcr_full)
sink()
save(pcr_train, pcr_best, pcr_tMSE, pcr_full, file ="data/PCR-Regression.RData")
setwd("~/stat159/stat159-project3")
source("code/scripts/train-test-sets-script.R")
train_nona <- complete.cases(train_set)
set.seed(98765)
library(glmnet)
grid <- 10^seq(10, -2, length = 100)
grid = 10^seq(10, -2, length = 100)
lasso_train = cv.glmnet(x = train_set[train_nona,1:83],
y = test_set[train_nona, 84],
intercept = FALSE,
standardize = FALSE,
lambda = grid)
lasso_train = cv.glmnet(x = as.matrix(train_set[train_nona,1:83]),
y = as.vector(test_set[train_nona, 84]),
intercept = FALSE,
standardize = FALSE,
lambda = grid)
train_nona = complete.cases(train_set)
lasso_train = cv.glmnet(x = as.matrix(train_set[train_nona,1:83]),
y = as.vector(train_set[train_nona, 84]),
intercept = FALSE,
standardize = FALSE,
lambda = grid)
lasso_best = lasso_train$lambda.min
plot(lasso_train)
png("images/lasso-validation.png")
plot(lasso_train)
dev.off()
test_nona = complete.cases(test_set)
plot(predict(lasso_train, as.matrix(test_set[test_nona, ]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
plot(predict(lasso_train, as.matrix(test_set[test_nona, -84]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(test_set[test_nona, 84], col = "black")
plot(predict(lasso_train, as.matrix(test_set[test_nona, -84]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Admissions Rate",
ylab = "Normalized Admissions Rate")
lines(test_set[test_nona, 84], col = "black")
png("images/lasso-prediction-plot.png")
plot(predict(lasso_train, as.matrix(test_set[test_nona, -84]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Admissions Rate",
ylab = "Normalized Admissions Rate")
lines(test_set[test_nona, 84], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
dev.off()
lasso_pred = predict(lasso_train, as.matrix(test_set[test_nona, 84]), s = lasso_best)
lasso_pred = predict(lasso_train, as.matrix(test_set[test_nona, -84]), s = lasso_best)
lasso_tMSE = mean((lasso_pred - test_set[test_nona, 84])^2)
lasso_tMSE
full_nona = complete.cases(scaled_colleges)
lasso_full= glmnet(as.matrix(scaled_colleges[full_nona,-84]), as.matrix(scaled_colleges[full_nona, 84]),
intercept = FALSE, standardize = FALSE, lambda = lasso_best)
save(lasso_train, lasso_best, lasso_tMSE, lasso_full, file = "data/Lasso-Regression.RData")
sink("data/lasso-output.txt")
cat("\n Best Lamba:")
lasso_best
cat("\n Lasso test MSE:")
lasso_tMSE
cat("\n Official Coefficients")
coef(lasso_full)
sink()
library(pls)
set.seed(98765)
########################### Load Data and T-T indicies ##########################
source("code/scripts/train-test-sets-script.R")
# rows with only no NA's
train_nona <- complete.cases(train_set)
########################### Run PCR and Cross Validation ##########################
pcr_train = pcr(ADM_RATE ~ ., data= train_set[train_nona, ], validation = "CV")
########################### Best lambda/model ##########################
pcr_best = which.min(pcr_train$validation$PRESS)
########################### Validation plot ##########################
png(filename = "images/pcr-validation.png")
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
dev.off()
########################### Apply best model to test set ##########################
# rows with only no NA's
test_nona = complete.cases(test_set)
# get predicted admissions rates with test set
pcr_pred <- predict(pcr_train, test_set[test_nona,-84], ncomp = pcr_best)
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, "ADM_RATE"])^2)
########################### Full Model ##########################
full_nona = complete.cases(scaled_colleges)
pcr_full <- pcr(ADM_RATE ~ ., data= scaled_colleges[full_nona, ], ncomp = pcr_best)
########################### output primary results ##########################
sink("data/pcr-output.txt")
cat("Best Model's Lambda:\n")
pcr_best
cat("\n Test MSE:\n")
pcr_tMSE
cat("\n Official Model and Coefficients:\n")
summary(pcr_full)
cat("\n")
coefficients(pcr_full)
sink()
save(pcr_train, pcr_best, pcr_tMSE, pcr_full, file ="data/PCR-Regression.RData")
#setwd("~/stat159/project3/")
colleges_df <- read.csv("data/datasets/colleges.csv")
source("code/functions/cleaning-helpers.R")
colleges_df <- factor_this(colleges_df)
options(na.action = 'na.pass')
# dummy out categorical variables
temp_df <- model.matrix(ADM_RATE ~ ., data = colleges_df[ ,7:35])[ ,-1]
# removing column of ones, and appending regressors to Balance
new_colleges_df <- cbind(temp_df, ADM_RATE = colleges_df$ADM_RATE)
# scaling and centering
scaled_colleges <- scale(new_colleges_df, center = TRUE, scale = TRUE)
# export scaled data
write.csv(scaled_colleges, file = "data/datasets/scaled-colleges.csv", row.names = FALSE)
save(scaled_colleges, file = "data/RData-files/scaled-colleges.RData")
#This code will parse out what data is used for the train or tests sets.
#The train set will be used to build the model, and the test will be used to test the model.
#Loading in the data to be parsed.
scaled_colleges <- read.csv('data/datasets/scaled-colleges.csv', header = TRUE)
scaled_colleges$X <- NULL
#creating a sample of indices
set.seed(12345)
indx <- sample(1:nrow(scaled_colleges), round(.75*nrow(scaled_colleges), digits = 0))
#creating a train set using the indices chosen from the sample above.
train_set <- scaled_colleges[indx, ]
#creating a test set from the indices not chosen from the sample above.
test_set <- scaled_colleges[-indx, ]
#Saving the data sets.
save(train_set, test_set, file = "data/RData-files/train-test-sets.RData")
library(pls)
set.seed(98765)
source("code/scripts/train-test-sets-script.R")
source("code/scripts/train-test-sets-script.R")
train_nona <- complete.cases(train_set)
########################### Run PCR and Cross Validation ##########################
pcr_train = pcr(ADM_RATE ~ ., data= train_set[train_nona, ], validation = "CV")
########################### Best lambda/model ##########################
pcr_best = which.min(pcr_train$validation$PRESS)
########################### Validation plot ##########################
png(filename = "images/pcr-validation.png")
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
dev.off()
########################### Apply best model to test set ##########################
# rows with only no NA's
test_nona = complete.cases(test_set)
# get predicted admissions rates with test set
pcr_pred <- predict(pcr_train, test_set[test_nona,-84], ncomp = pcr_best)
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, "ADM_RATE"])^2)
########################### Full Model ##########################
full_nona = complete.cases(scaled_colleges)
pcr_full <- pcr(ADM_RATE ~ ., data= scaled_colleges[full_nona, ], ncomp = pcr_best)
########################### output primary results ##########################
sink("data/pcr-output.txt")
cat("Best Model's Lambda:\n")
pcr_best
cat("\n Test MSE:\n")
pcr_tMSE
cat("\n Official Model and Coefficients:\n")
summary(pcr_full)
cat("\n")
coefficients(pcr_full)
sink()
save(pcr_train, pcr_best, pcr_tMSE, pcr_full, file ="data/PCR-Regression.RData")
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, "ADM_RATE"])^2)
train_nona = complete.cases(train_set)
pcr_train = pcr(ADM_RATE ~ ., data= train_set[train_nona, ], validation = "CV")
pcr_best = which.min(pcr_train$validation$PRESS)
png(filename = "images/pcr-validation.png")
validationplot(pcr_train, val.type = "MSEP", main = "PCR Cross Validated Error")
abline(v = pcr_best, lty = 2)
dev.off()
test_nona = complete.cases(test_set)
View(scaled_colleges)
View(test_set)
colnames(train_set)
pcr_pred <- predict(pcr_train, test_set[test_nona,-114], ncomp = pcr_best)
pcr_tMSE <- mean((pcr_pred - test_set[test_nona, "ADM_RATE"])^2)
full_nona = complete.cases(scaled_colleges)
pcr_full <- pcr(ADM_RATE ~ ., data= scaled_colleges[full_nona, ], ncomp = pcr_best)
sink("data/pcr-output.txt")
cat("Best Model's Lambda:\n")
pcr_best
cat("\n Test MSE:\n")
pcr_tMSE
cat("\n Official Model and Coefficients:\n")
summary(pcr_full)
cat("\n")
coefficients(pcr_full)
sink()
library(glmnet)
set.seed(98765)
source("code/scripts/train-test-sets-script.R")
train_nona = complete.cases(train_set)
grid = 10^seq(10, -2, length = 100)
lasso_train = cv.glmnet(x = as.matrix(train_set[train_nona,1:113]),
y = as.vector(train_set[train_nona, 114]),
intercept = FALSE,
standardize = FALSE,
lambda = grid)
lasso_best = lasso_train$lambda.min
png("images/lasso-validation.png")
plot(lasso_train)
dev.off()
test_nona = complete.cases(test_set)
plot(predict(lasso_train, as.matrix(test_set[test_nona, -114]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Admissions Rate",
ylab = "Normalized Admissions Rate")
lines(test_set[test_nona, 114], col = "black")
png("images/lasso-prediction-plot.png")
plot(predict(lasso_train, as.matrix(test_set[test_nona, -114]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Admissions Rate",
ylab = "Normalized Admissions Rate")
lines(test_set[test_nona, 114], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
dev.off()
lasso_pred = predict(lasso_train, as.matrix(test_set[test_nona, -114]), s = lasso_best)
lasso_tMSE = mean((lasso_pred - test_set[test_nona, 114])^2)
full_nona = complete.cases(scaled_colleges)
lasso_full= glmnet(as.matrix(scaled_colleges[full_nona,-114]), as.matrix(scaled_colleges[full_nona, 84]),
intercept = FALSE, standardize = FALSE, lambda = lasso_best)
save(lasso_train, lasso_best, lasso_tMSE, lasso_full, file = "data/Lasso-Regression.RData")
sink("data/lasso-output.txt")
cat("\n Best Lamba:")
lasso_best
cat("\n Lasso test MSE:")
lasso_tMSE
cat("\n Official Coefficients")
coef(lasso_full)
sink()
